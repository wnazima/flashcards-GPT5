name: Release Images

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write
  id-token: write   # necessário para Cosign keyless e SLSA

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  REPO: ${{ github.event.repository.name }}

jobs:
  build_and_push:
    name: Build and Push (multi-arch) + SBOM + Sign + Provenance
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      api_tags: ${{ steps.meta-api.outputs.tags }}
      web_tags: ${{ steps.meta-web.outputs.tags }}
      api_image: ${{ steps.meta-api.outputs.images }}
      web_image: ${{ steps.meta-web.outputs.images }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tags (metadata) API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/api
          flavor: |
            latest=true
          tags: |
            type=sha
            type=edge,branch=main
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - name: Derive tags (metadata) WEB
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/web
          flavor: |
            latest=true
          tags: |
            type=sha
            type=edge,branch=main
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build & Push with Bake (multi-arch + attests)
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
          targets: |
            api
            web
          set: |
            api.tags=${{ steps.meta-api.outputs.tags }}
            web.tags=${{ steps.meta-web.outputs.tags }}
          push: true
          provenance: mode=max
          sbom: true

      # Cosign keyless: assina por digest (precisa id-token: write)
      - name: Install Cosind (cosign)
        uses: sigstore/cosign-installer@v3.7.0

      - name: Discover pushed digests
        id: digests
        run: |
          echo "API_DIGESTS<<EOF" >> $GITHUB_OUTPUT
          skopeo list-tags docker://${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/api || true
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash
        if: false  # opcional; para depuração de tags - desabilitado

      - name: Extract digests from build summary
        id: extract
        run: |
          # Busca os últimos manifests publicados para cada imagem/tag principal
          echo "API_REF=${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/api" >> $GITHUB_OUTPUT
          echo "WEB_REF=${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/web" >> $GITHUB_OUTPUT

      - name: Cosign: sign all pushed tags by digest (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          # Assinar por tag resolve para digest — recomendável enumerar os digests finais
          for TAG in ${{ steps.meta-api.outputs.tags }}; do
            cosign sign --yes "${TAG}"
          done
          for TAG in ${{ steps.meta-web.outputs.tags }}; do
            cosign sign --yes "${TAG}"
          done

      # SBOM via Syft + Cosign attestation (complementar ao attestation do Buildx)
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOMs (SPDX JSON) and attach (cosign attest)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          mkdir -p sbom
          # Gera SBOM para um subconjunto de tags (exemplo: latest e semver completo), ajuste se quiser.
          for IMAGE in \
            "${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/api:latest" \
            "${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}/web:latest"; do
            OUT="sbom/$(echo "$IMAGE" | tr '/:' '__').spdx.json"
            syft packages "$IMAGE" -o spdx-json > "$OUT"
            cosign attest --yes --type spdxjson --predicate "$OUT" "$IMAGE"
          done

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: sbom/*.spdx.json

      # Proveniência SLSA — exemplo de reuso do gerador oficial
      - name: SLSA Provenance (attestation)
        uses: slsa-framework/slsa-github-generator/actions/attest-build-provenance@v2.0.0
        with:
          subject-path: |
            ./docker-bake.hcl

  deploy_staging:
    name: Deploy to Staging (auto on main)
    needs: [build_and_push]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/deploy.yml
    with:
      environment: staging
      api_tags: ${{ needs.build_and_push.outputs.api_tags }}
      web_tags: ${{ needs.build_and_push.outputs.web_tags }}
    secrets: inherit

  deploy_production_on_release:
    name: Deploy to Production (on Release)
    needs: [build_and_push]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      api_tags: ${{ needs.build_and_push.outputs.api_tags }}
      web_tags: ${{ needs.build_and_push.outputs.web_tags }}
    secrets: inherit
